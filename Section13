===========================================================
Section 13: Maintaining Sets of Containers with 'Deployments'
===========================================================

Lecture 190. Updating Existing Objects
======================================

Find an existing 'Pod' and update the image that it is using

Updated the Config File
- Name: client-pod
- Type: pod
- image: multi-workder

kubectl -> Master -> Virtual Machine (Node) {
                                              Pod 
                                              Name: client-pod

                                              multi-client container
                                            } 

Lecture 191. Declarative Updates in Action
==========================================

upate client-pod.yaml

apiVersion: v1
kind: Pod
metadate:
  name: client-pod
  labels:
    component: web
spec:
  containers:
    - name: client
      image: marshad1/multi-worker # update multi-client to multi-worker image
      ports:
        - containerPort: 3000

$ kubectl apply -f client-pod.yaml
pod/client-pod configured

$ kubectl get pods
NAME    READY     STATUS      RESTARTS      AGE

Get detailed info about an object
$ kubectl describe <object type> <object name>
$ kubectl describe pod client-pod

Lecture 192. Limitations in Config Updates
==========================================

ports:
  - containerPort: 9999 # update port number from 3000 to 9999
 
$ kubectl apply -f client-pod.yaml

Lecture 193. Quick Note to Prevent an Error
===========================================

Lecture 194. Running Containers with Deployments
================================================

Pods -> Runs a single set of containers
Deployment -> RUns a set of identical pods (one or more)

Services -> Setups up 'networking' in a Kubernetes Cluster

Deployment object has a Pod Template

Lecture 195. Deployment Configuration Files
===========================================

$ touch client-deployment.yaml # a a file client-deployment.yaml

---
apiVersion: apps/v1
kind: Deployment # Runs a set of identical pods
metadata:
  name: client-deployment
spec:
  replicas: 1 # Number of pods this deployment is supposed to make
  selector:
    matchlabels:
      component: web
  template: # Configuration for every single pod using this deployment
    metadata:
      labels:
        component: web
    spec:
      containers:
        - name: client
          image: marshad1/multi-client
          ports:
            - containerPort: 3000
---

Lecture 196. Walking Through the Deployment Config
==================================================

Lecture 197. Applying a Deployment
==================================
$ kubectl get pods

Remove an object:
$ kubectl delete -f <config file>
$ kubectl delete -f client-pod.yaml
pod "client-pod" deleted

$ kubectl apply -f client-deployment.yaml
deployment.apps/client-deployment created

$ kubectl get pods
$ kubectl get deployments
NAME    DESIRED   CURRENT   UP-TO-DATE    AVAILABLE   AGE

Lecture 198. Why Use Services?
===============================
$ minikube ip
$ kubectl get pods -o wide

Lecture 199. Scaling and Changing Deployments
=============================================
ports:
  - containerPort: 9999 # change port from 3000 to 9999

$ kubectl apply -f client.deployment.yaml
deployment.apps/client-deployment configured # Notice 'configured' vs 'created'

$ kubectl get deployments
$ kubectl get pods
$ kubectl describe pods

$ kubectl apply -f client-deployment.yaml

Lecture 200. Updating Deployment Images
========================================
$ minikube ip

Lecture 201. Rebuilding the Client Image
========================================
$ cd complex/client

# Crate a new Image
$ docker buid -t muarshad01/multi-client . # '.' is build context

# Push to docker hub
$ docker push muarshad01/multi-client

Lecture 202. Triggering Deployment Updates
==========================================
$ kubectl apply -f client-deployment.yaml

deployment.apps/client-deployment unchanged # Notice 'unchanged', it means new config file is same as previous

$ kubectl get pods

Lecture 203. Imperatively Updating a Deployment's Image
========================================================
- Update the multi-client image
- Tag the image with a version number, push to docker hub
- Run a 'kubectl' command forcing the deployment to user the new image version

$ cd complex/client

$ docker build -t marshad1/multi-client:v5 .
$ docker push <tag-name>
$ docker push marshad1/multi-client:v5

$ kubect set image <object_type>/<object_name> <container_name>=<new image to use>
$ kubect set image deployment/client-deployment client=marshad1/multi-client:v5

$ kubect get pods
$ minikube ip

Lecture 204. Multiple Docker Installations
==========================================
$ docker ps

Lecture 205. Reconfiguring Docker CLI
=====================================
$ cd simplek8s
$ docker ps
$ eval $(minikube docker-env) # Temprarily, reconfigures local copy of docker client to 
                                connect to the docker server inside the kubernetes node
$ docker ps

Lecture 206. Why Mess with Docker in the Node?
==============================================
-- Use all the same debugging techniques we learned with Docker CLI
-- Manually kill containers to test Kubernetes ability to 'self-heal'
-- Deleted cached images in the node

$ docker logs CONTAINER-ID  
$ docker exect -it CONTAINER-ID sh # 'i' STDIN of process; -t: 

$ kubectl get pods
$ kubect logs <pod-name>
$ kubect exec -it <pod-name> sh
$ ls

$ docker system prune -a 