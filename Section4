==========================================
Section4: Making Real Projects with Docker
==========================================
The goal of this porject is to create a tiny 'Node JS Web App', wrap it inside a Docker Container and then be able to access it from a browser running on a local machine

Lecture 37: Project Outline
===========================
Steps:
	1. Crete Node JS web app
	2. Create a Dockerfile
	3. Build image from Dockerfile
	4. Run image as container
	5. Connect to web app from a browser

Lecture 38: Node Server Setup
=============================
$ mkdir simpleweb
$ cd simpleweb

(a) create a file named package.json with the following content:

{
  "dependencies": {
    "express": "*"
  },
  "scripts": {
    "start": "node index.js"
  }
}

(b) crate a file named index.js with the following content:

const express = require('express');

const app = express();
 
app.get('/', (req, res) => {
  res.send('How are you doing');
});
 
app.listen(8080, () => {
  console.log('Listening on port 8080');
});


Lecture 39: A Few Planned Errors
================================

1. create a file named Dockerfile

---
# Specify a base image
FROM alpine

# Install some dependencies
RUN npm install

# Default command
CMD ["npm", "start"]
---

2. $ docker build . # '.' is the build context

We should see the following: 
/bin/sh: npm: not found
The command '/bin/sh -c npm install' returned a non-zero code: 127

Lecture 40: Base Image Issues
=============================
Update Dockerfile file

---
# Specify a base image
FROM node:alpine # Notice: We're now using node:alpine and not alpine

# Install some dependencies
RUN npm install # Install deps by running 'npm install'. Node Package Manager (npm)

# Default command
CMD ["npm", "start"] # Start server by running 'npm start'
---

$ docker build .

Lecture 41: A Few Missing Files
===============================
$ docker build .

npm WARN saveError ENOENT: no such file or directory, open '/package.json'
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN enoent ENOENT: no such file or directory, open '/package.json'
npm WARN !invalid#2 No description
npm WARN !invalid#2 No repository field.
npm WARN !invalid#2 No README data
npm WARN !invalid#2 No license field.

Lecture 42: Copying Build Files
===============================

Update Dockerfile file

---
# Specify a base image
FROM node:alpine

# Install some dependencies
COPY ./ ./ # COPY (current working directory of simpleweb) (current working directory inside the container)
RUN npm install

# Default command
CMD ["npm", "start"]
---

$ docker build . 

The following is fine. No issue:
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN !invalid#2 No description
npm WARN !invalid#2 No repository field.
npm WARN !invalid#2 No license field.
Successfully built IMAGE_ID

$ docker build -t marshad1/simpleweb .
Successfully tagged marshad1/simpleweb:latest

$ docker run marshad1/simpleweb
Listening on port 8080

localhost:8080 # The sige can't be reached

Lecture 43: Container Port Mapping
==================================
$ docker build -t marshad1/simpleweb . -- # Tagging an image
$ docker image ls -a
$ docker run marshad1/simpleweb -- # Go to your browser and typle localhost:8080, nothing prints out!
$ ctrl-c

$ docker run -p (Route incoming requests to this port on local host to...):(...this port inside the container) IMAGE_ID
$ docker run -p 8080:8080 marshad1/simpleweb -- # Port mapping
$ docker run -it marshad1/simpleweb sh

Lecture 44: Specifying Working Directory
========================================

Update Dockerfile file

---
# Specify a base image
FROM node:alpine

WORKDIR /usr/app

# Install some dependencies
COPY ./ ./ # COPY (current working directory of simpleweb) (current working directory inside the container)
RUN npm install

# Default command
CMD ["npm", "start"]
---

$ docker run -p (Route incoming requests to this port on local host to...):(...this port inside the container) IMAGE_ID
$ docker run -p 8080:8080 marshad1/simpleweb

Run another process inside a docker container
$ docker exec -it CONTAINER_ID sh

Lecture 45: Specifying a Working Directory
==========================================
WORKDIR /usr/app # Any following command will be executed relative to this path in the container

---
# Specify a base image
FROM node:alpine # Notice node:apline

WORKDIR /usr/app

# Install some dependencies
RUN npm install

# Default command
CMD ["npm", "start"]
---

$ docker build -t marshad1/simpleweb .
$ docker run -p 8080:8080 marshad1/simpleweb

Start another process inside a running container 'docker exec'
$ docker ps # Get CONTAINER_ID
$ docker exec -it CONTAINER_ID
/usr/app #

Lecture 46. Unnecessary Rebuilds
================================
$ docker build -t marshad1/simpleweb . # '.' specify the build context

Lecture 47. Minimizing Cache Busting and Rebuilds
=================================================
Update Dockerfile

---
# Specify a base image
FROM node:alpine

WORKDIR /usr/app

# Install some depenendencies
COPY ./package.json ./
RUN npm install
COPY ./ ./

# Default command
CMD ["npm", "start"]
---
