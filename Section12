==================================
Section 12: Onwards to Kubernetes!
==================================

Lecture 173. The Why's and What's of Kubernetes
=======================================
Q: What is Kubernetes? 
  - System for running many different containers over multiple different machines

AWS Elastic Bean Stalk (EBS) has following 4 servers / containers:
  - nginx
  - server
  - client
  - worker

Q: How would we scale-up this application?

Q: Why use Kubernetes? 
  - When you need to run many different containers with different images

Node:
  - set of containers

Master

Lecture 174. Kubernetes in Development and Production
=====================================================
Development
-- MiniKube (cmd line tool: sets up a ting little cluster on local computer)

Production
  -- Managed solutions:
    -- EKS: Amazon Elastic Container Service for Kubernetes (EKS)
    -- GKE: Google Cloud Kubernetes Engine
 
Your Computer:
-- minikube (Use for managing VM itself) --> Virtual Machine (Node) {Container_1, ..., Container_N}
-- kubectl  (Use for managign containers in the node)  --> Virtual Machine (Node) {Container_1, ..., Container_N}

minikube is local only but kubectl is both local / production env

Local Kubernetes Development
- Install kubectl
- Install a VM driver virtualbox
- Install minikube

Lecture 175: New Minikube Install Instructions
==============================================
Instead of running $ brew cask install minikube

We only need to run $ brew install minikube

Lecture 176. Minikube Setup on MacOS
====================================
1. Make sure Brew is installed --> Download brew @ https://brew.sh (/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)")
                                  $ which brew
                                  /usr/local/bin/brew

2. Install Kubectl --> $ brew install kubectl
                       $ which kubectl 
                       /usr/local/bin/kubectl

3. Install a VM driver virtualbox --> Download VirtualBox @ https://www.virtualbox.org/ (Downloads --> OS X hosts)

4. Install minikube  -->  $ brew cask install minikube
                          $ which minikube
                          /usr/local/bin/minikube

Hint: sudo chown -R $(whoami) /usr/local 

5. Start minikube --> $ minikube start
                      $ minikube status

Lecture 177: Minikube Setup on Windows Pro/Enterprise
=====================================================

Lectur 178: Minikube Setup on Windows Home
==========================================

Lecture 179: Minikube Stup on Linux
===================================

Lecture 180: Docker Destktops's Kubernetes instead of MiniKube
==============================================================

Lecture 181: Mapping Existing Knowledge
=======================================
$ minikube status
- minikube
- type: Control Plane
- host: Running
- kubelet: Running
- apiserver: Running
- kubeconfig: Configured

$ kubectl cluster-info
- Kubernetes master is running at https://192.168.64.2:8443
- KubeDNS is running at https://192.168.64.2:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

- To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

Lecture 182: Quick Note to prevent an Error
===========================================

Lecture 183. Adding Configuration Files
=======================================
Kubernetes expects ALL images to already be built

$ mkdir simpleK8s
$ cd simple K8s
$ touch client-pod.yaml # create a file

---
apiVersion: v1 # Scopes or limits the type of 'objects' we can create with any given configuration
kind: Pod
metadata:
  name: client-pod
  labels:
    component: web # related or tied to other config file we will write down
spec:
  containers:
    - name: client
      image: marshad1/multi-client # image on docker hub
      ports:
        - containerPort: 3000
---

$ touch client-node-port.yaml # create a file

---
apiVersion: v1
kind: Service # 'Kind' represents the type of object that we want to make e.g., Kind=Service or kind=Pod

metadata:
  name: client-node-port
spec:
  type: NodePort
  ports:
    - ports: 3050
      targetPort: 3000
      nodePort: 31515
  selector:
    component: web
---

184. Object Types and API Versions
==================================

In kubernetes, config files are used to crate 'Objects' (or specific types of objects), 
a thing that exists inside our kubernetes cluter.

Example object types:
1. StatefulSet
2. ReplicaController
3. Pod - A Pod object is used to run a container.
4. Service - A Service object is used to set up some kind of networking.


Each API version defined a different set of 'objects' we can use

Lecture 185: Running Containers in Pods
=======================================
$ minikube start --> Create a VM referred to as 'Node'; 
                   Node runs various types of 'objects' such as Pod
                   Pod is a grouping of containers with 'similar' purpose

Node{
  Pod {
    nginx: container
  }
}

Lecture 186. Service Config Files in Depth
==========================================
Object Types:

Pods: Runes one or more closely related containers

Services: Sets up networking in a Kubernetes cluster. There are 4 subtypes:
	-- ClusterIP
	-- NodePort: Exposes a container to the outside world (only good for 'dev' purposes!!!)
	-- LoadBalancer
	-- Ingres

apiVersion: v1
kind: Service # 'Kind' represents the type of object that we want to make e.g., Kind=Service or kind=Pod

metadata:
  name: client-node-port
spec:
  type: NodePort # Subtype of Service object
  ports:
    - port: 3050
      targetPort: 3000 # same as containerPort in kind=Pod definition
      nodePort: 31515 # We type this into our browser URL
  selector:
    component: web # Note the relationship with label in other service. How they are connected together.
---

selector and labels are used to connect objects.


labels:
    component: web
selector:
    component: web
or

labels:
    tier: frontend
selector:
    tier: frontend

Lecutre 187. Connecting to Running Containers
=====================================
$ cd simplek8s
$ kubectl apply -f client-pod.yaml 
-- pod/client-pod configured
$ kubectl apply -f client-node-port.yaml
-- service/client-node-port configured

$ kubectl get pods

NAME        READY   STATUS    RESTARTS    AGE
client-pod  1/1     Running   0           1h

$ kubectl get pods

NAME              TYPE        CLUSTER-IP      EXTERNAL-IP     PORTS(S)        AGE
client-node-port  NodePort    a.b.c.d         <none>          3050:31515/TCP  1h
kubernetes        ClusterIP   p.q.r.s         <none>          443/TCP         4d

$ minikube ip # prints the ip address of that VM

Lecture 188. The Entire Deployment Flow
=======================================
$ kubect get pods

$ docker ps

$ docker kill CONTAINER_ID

$ docker ps

$ kubect get pods

NAME        READY   STATUS    RESTARTS    AGE
                                 1           

Note: Deployment file goes to Master and not Nodes

Lecture 189. Imperative vs Declarative Deployments
==================================================
- Kubernetes is a system to deploy containerized apps
- Nodes are individual machines (or vm's) that run containers
- Masters are machines (or vm's) with a set of programs to manage Nodes
- Kubernetes didn't build our imgages - it got them from somewhere else
- Kubernetes (the master) decided where to run each container - each node 
  can run a dissimilar set of containers
- To deploy something, we update the desired state of the master with a config file
- The master works constantly to meet your desired state