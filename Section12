==================================
Section 12: Onwards to Kubernetes!
==================================

156. The Why's and What's of Kubernetes
=======================================

What is Kubernetes? 
System for running many different containers over multiple different machines

Why use Kubernetes? 
When you need to run many different containers with different images

157. Kubernetes in Development and Production
=============================================

Development
-- MiniKube

Production
 -- EKS: Amazon Elastic Container Service for Kubernetes (EKS)
 -- GKE: Google Cloud Kubernetes Engine
 
Local computer

-- Kubectl (Both locally and in production): To tell a VM or node what set of containers it is supposed to be running

-- Minikube (Local only!!): To create and run a kubernestes cluster on local machine
 

158. Setup on MacOS
===================

1. Make sure Brew is installed 
Download brew @ https://brew.sh (/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)")

$ which brew
/usr/local/bin/brew

2. Install Kubectl
brew install kubectl

$ brew install kubectl
$ which kubectl 
/usr/local/bin/kubectl

3. Install a VM driver virtualbox
Download VirtualBox @ https://www.virtualbox.org/ (Downloads --> OS X hosts)

4. Install minikube 

$ brew cask install minikube
$ which minikube
/usr/local/bin/minikube

5. Start minikub
$ minikube start

159. Mapping Existing Knowledge
===============================
$ minikube status
$ kubectl cluster-info

160. Adding Configuration Files
===============================
Kubernetes expects all images to already be built

create a file client-pod.yaml

---
apiVersion: v1
kind: Pod
metadata:
  name: client-pod
  labels:
    component: web
spec:
  containers:
    - name: client
      image: marshad1/multi-client
      ports:
        - containerPort: 3000
---

create a file client-node-port.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: client-node-port
spec:
  type: NodePort
  ports:
    - ports: 3050
      targetPort: 3000
      nodePort: 31515
  selector:
    component: web
---

161. Object Types and API Versions
==================================

In kubernetes, config files are used to crate 'Objects' (or specific types of objects), a thing that exists inside our kubernetes cluter.

Example object types:
1. StatefulSet
2. ReplicaController
3. Pod
4. Service

'Kind' represents the type of object that we want to make e.g., Kind=Pod or Kind=Service

A Pod object is used to run a container.
A Service object is used to set up some kind of networking.

Each API version defined a different set of 'objects' we can use

162. Running Containers in Pods
===============================

163. Service Config Files in Depth
==================================

164. Connecting to Running Containers
=====================================

165. The Entire Deployment Flow
================================

166. Imperative vs Declarative Deployments
==========================================