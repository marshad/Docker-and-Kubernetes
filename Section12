==================================
Section 12: Onwards to Kubernetes!
==================================

Lecture 173. The Why's and What's of Kubernetes
=======================================
Q: What is Kubernetes? 
  - System for running many different containers over multiple different machines

AWS Elastic Bean Stalk (EBS) has following 4 servers / containers:
  - nginx
  - server
  - client
  - worker

Q: How would we scale-up this application?

Q: Why use Kubernetes? 
  - When you need to run many different containers with different images

Node:
  - set of containers

Master

Lecture 174. Kubernetes in Development and Production
=====================================================
Development
-- MiniKube (cmd line tool: sets up a ting little cluster on local computer)

Production
  -- Managed solutions:
    -- EKS: Amazon Elastic Container Service for Kubernetes (EKS)
    -- GKE: Google Cloud Kubernetes Engine
 
Your Computer:
-- minikube (Use for managing VM itself) --> Virtual Machine (Node) {Container_1, ..., Container_N}
-- kubectl  (Use for managign containers in the node)  --> Virtual Machine (Node) {Container_1, ..., Container_N}

minikube is local only but kubectl is both local / production env

Local Kubernetes Development
- Install kubectl
- Install a VM driver virtualbox
- Install minikube

Lecture 175: New Minikube Install Instructions
==============================================
Instead of running $ brew cask install minikube

We only need to run $ brew install minikube

Lecture 176. Minikube Setup on MacOS
====================================
1. Make sure Brew is installed --> Download brew @ https://brew.sh (/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)")
                                  $ which brew
                                  /usr/local/bin/brew

2. Install Kubectl --> $ brew install kubectl
                       $ which kubectl 
                       /usr/local/bin/kubectl

3. Install a VM driver virtualbox --> Download VirtualBox @ https://www.virtualbox.org/ (Downloads --> OS X hosts)

4. Install minikube  -->  $ brew cask install minikube
                          $ which minikube
                          /usr/local/bin/minikube

Hint: sudo chown -R $(whoami) /usr/local 

5. Start minikube --> $ minikube start
                      $ minikube status

Lecture 177: Minikube Setup on Windows Pro/Enterprise
=====================================================

Lectur 178: Minikube Setup on Windows Home
==========================================

Lecture 179: Minikube Stup on Linux
===================================

Lecture 180: Docker Destktops's Kubernetes instead of MiniKube
==============================================================

Lecture 181: Mapping Existing Knowledge
=======================================
$ minikube status
- minikube
- type: Control Plane
- host: Running
- kubelet: Running
- apiserver: Running
- kubeconfig: Configured

$ kubectl cluster-info
- Kubernetes master is running at https://192.168.64.2:8443
- KubeDNS is running at https://192.168.64.2:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

- To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

Lecture 182: Quick Note to prevent an Error
===========================================

Lecture 160. Adding Configuration Files
=======================================
Kubernetes expects all images to already be built

create a file client-pod.yaml

---
apiVersion: v1
kind: Pod
metadata:
  name: client-pod
  labels:
    component: web
spec:
  containers:
    - name: client
      image: marshad1/multi-client
      ports:
        - containerPort: 3000
---

create a file client-node-port.yaml

---
apiVersion: v1
kind: Service
metadata:
  name: client-node-port
spec:
  type: NodePort
  ports:
    - ports: 3050
      targetPort: 3000
      nodePort: 31515
  selector:
    component: web
---

184. Object Types and API Versions
==================================

In kubernetes, config files are used to crate 'Objects' (or specific types of objects), a thing that exists inside our kubernetes cluter.

Example object types:
1. StatefulSet
2. ReplicaController
3. Pod
4. Service

'Kind' represents the type of object that we want to make e.g., Kind=Pod or Kind=Service

A Pod object is used to run a container.
A Service object is used to set up some kind of networking.

Each API version defined a different set of 'objects' we can use

Lecture 185: Running Containers in Pods
===============================

minikube

minikube start --> VM (Node)
Node runs various types of objects such as Pod

Pod is a grouping of containers with various purposes

163. Service Config Files in Depth
==================================

Object Types:

Pods: Rune one of more closely related containers
Services: Sets up networking in a Kubernetes Cluster
	-- ClusterIP
	-- NodePort: Exposes a container to the outside world (only good for 'dev' purposes!!!)
	-- LoadBalancer
	-- Ingres
	
164. Connecting to Running Containers
=====================================

selector and labels are used to connect objects.

$ kubectl apply -f client-pod.yaml
$ kubectl apply -f client-node-port.yaml

Kubernetes create deployment unexpected  Scheme Error (https://stackoverflow.com/questions/55417410/kubernetes-create-deployment-unexpected-schemaerror)

---
In my system kubectl is running from docker which is preinstalled when we install Docker. You can check this by using below command

ls -l $(which kubectl) 

which returns as
/usr/local/bin/kubectl -> /Applications/Docker.app/Contents/Resources/bin/kubectlcode.

Now we have to overwrite the symlink with kubectl which is installed using brew

rm /usr/local/bin/kubectl

brew link --overwrite kubernetes-cli 

(optinal)
brew unlink kubernetes-cli && brew link kubernetes-cli

To Verify
ls -l $(which kubectl)
---

$ kubectl get pods
$ kubectl get services

$ minikube ip (There is no localhost!)


165. The Entire Deployment Flow
================================

Deployment file goes to Master and not Nodes

166. Imperative vs Declarative Deployments
==========================================