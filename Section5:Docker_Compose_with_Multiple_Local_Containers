
=========================
Lecture #51: App Overview
===============-=========

A WebApp that simply displays the number of times this page has been visited.

Webpage --> Docker Container (Node App) --> Docker Container (Redis)

===================================
Lecture #52: App Server Starter Code
===================================

$ mkdir visits
$ cd visits

Create file 'package.json':
---
{
    "dependencies": {
        "express": "*",
        "redis": "2.8.0"
    },
    "scripts": {
        "start": "node index.js"
    }
}
---

Create file 'index.js':
---
const express = require('express');
const redis = require('redis');

const app = express();
const client = redis.createClient();
client.set('visits', 0);

app.get('/', (req, res) => {
	client.get('visites', (err, visits) => {
		res.send('Number of visits is ' + visits);
		client.set('visits', parseInt(visits) + 1);
	});
});

app.listen(8081, ()=> {
	console.log('Listening on port 8081');
});

---

===================================
Lecture #53: Assembling a Dockerfile
===================================

Create Dockerfile:

---
FROM node:alpine

WORKDIR '/app'

COPY package.json .
RUN npm install
COPY . .

CMD ["npm", "start"]
---

$ docker build .

You will see the following and this is tolly fine: 
npm notice created a lockfile as package-lock.json. You should commit this file.
npm WARN app No description
npm WARN app No repository field.
npm WARN app No license field.

$ build -t marshad1/visits:latest . 			# Tag the image
$ docker image ls -a

========================================
Lecture #54: Introducting Docker Compose
========================================

$ docer run marshad1/visits 				# Error: Redis connection to 127.0.0.1:6379 failed 
							# - connect ECONNREFUSED 127.0.0.1:6379

$ docker run redis 					# Ready to accept connections

================================
Lecture #55: Docker Compose Files
================================

What is Docker Compose?
	-- Seperate CLI that gets installed along with Docker
	-- Used to start up multiple Docker containers at the same time and connect them in an automated way
	-- Automates some of the long-winded arguments we were passing to 'docker run'

$ docker-compose

Create a file docker-compose.yml:
---
version: '3' 						# Version of docker-compose
services:
	redis-server: 					# Container
    		image: 'redis'
  	node-app: 					# Container
    		build: . 				# Create this container using Dockerfile in current directory
    		ports: 					# Map some ports from container of our local machines
      		- "4001:8081" 				# '-' in a yml file is used to specify a port; 
							# (local machine port):(container port)
---

===========================================
Lecture #56: Networking with Docker Compose
===========================================

Update index.js

---
const express = require('express');
const redis = require('redis');

const app = express();
const client = redis.createClient({
	host: 'redis-server',
	port: 6379
});
client.set('visits', 0);

app.get('/', (req, res) => {
    client.get('visits', (err, visits) => {
        res.send('Number of visits is ' + visits);
        client.set('visits', parseInt(visits) + 1);
    });
});

app.listen(8081, () => {
    console.log('Listening on port 8081');
});
---

===================================
Lecture #57: Docker Compose Commands
===================================

$ docker image ls -a | grep '^<none>' | awk '{print $3}' | xargs docker rmi

$ docker-compose up # Creating network "visits_default" with default driver. 
		    # ...
                    # Creating visits_node-app_1
		    # Creating visites_redis_node-app_1
		    # We should see redis-server-1 ...'Ready to accept connection' and node-app-1 ...Listening on port 8081

$ docker-compose up --build

==============================================
Lecture #58: Stopping Docker Compose Containers
==============================================

$ docker run -d redis
$ docker ps
$ docker stop CONTAINER_ID

$ docker-compose up -d 				# Launch in background
	# Creating network "visits_default" with the default driver
	# Creating visits_redis-server_1 ... done
	# Creating visits_node-app_a     ... done

$ docker ps

$ docker-compose down

==============================================
Lecture #59: Container Maintenance with Compose
==============================================

$ docker-compose up --build 			# 'Rebuild' the container

========================================
Lecture #60: Automatic Container Restarts
========================================

Four types of restart policies:
	(a) "no"           -- Never attempt to restart this container if it stops or crashes
	(b) always         -- If this container stops 'for any reason' always attempt to restart it
	(c) on-failure     -- Only restart if the container stops with an error code
	(d) unless-stopped -- Always restart unless we (the developers) forcibly stop it

================================================
Lecture #61: Container status with Docker Compose
================================================

$ docker ps

$ docker-compose up
$ docker-compose ps 				# Note: Run this command from the folder containing docker-compose-yml
