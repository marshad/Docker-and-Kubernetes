#================================================
Section 14: A Multi-Container App with Kubernetes
#================================================

Lecture 207: The Path to Production
===================================
$ cd simplek8s

- Create config files for each service and Deployment
- Test locally on minikube
- Create a Github/Travis flow to build images and deploy 
- Deploy app to a cloud provider 

Services:
 - Ingress Service
 - ClusterIP Service 

 Deployment:
 - multi-client
 - multi-server
 - multi-Worker
 - Redis pod 
 - Postgres pod 

Lecture 208: Checkpoint Files
=============================

Lecture 209: A Quick Checkpoint
===============================
$ cd complex
$ docker ps 
$ docker-compose up --build # rebuild all images
$ docker-compose up 

localhost:3050

Next: Take all images and migreate them in the world of kubernetes

Lecture 210: Recreating the Deployment
======================================
$ cd complex

delete:
- .travis.yml
- docker-compose.yml
- Dockerrun.aws.json
- nginx foldr and we'll be usign IngresServer for routing

$ mkdir k8s

$ touch client-deployment.yaml

---
apiVersion: app/v1
kind: Deployment
metadata:
    name: client-deployment
spec:
    replicas: 3
    selector:
        matchLabels: 
            component: web
    template: # Node template
        matadata:
            label:
                component: web
        spec:
            containers:
                - name: client
                  image: marshad1/multi-client
---

Lecutre 211: NodePort vs ClusterIP Services
===========================================

Pods: # Runs one or more closeley related containers 

Services: # Sets up 'networking' in a Kubernetes Cluster
- ClusterIP # Exposes a set of pods to other objects in the cluster
- NodePort # Expose a set of pods to the outside world (only good for dev purposes!!!)
- LoadBalancer
- Ingress

Lecture 212: The ClusterIP Config
=================================
$ cd k8s
$ touch client-cluster-ip-service.yaml
---
apiVersion: v1
kind: Service
metadata:
    name: client-cluster-ip-service
spec: 
    type: ClusterIP
    selector:
        component: web
    ports:
        - port: 3000
          targetPort: 3000
---

Lecture 213: Applying Multiple Files with Kubectl
=================================================
$ kubectl get deployments
$ kubectl deleted deployment client-deployment
$ kubectl get deployments
-- No resources found.

$ kubectl get services
$ kubectl delete service client-node-port
$ kubectl get services

$ kubectl apply -f k8s/client-deployment.yaml
$ kubectl apply -f k8s # applies every config file

$ kubectl get deployments
$ kubectl get services

Lecture 214: Express API Deployment Config
==========================================
$ cd k8s
$ touch server-deployment.yaml

---
apiVersion: app/v1
kind: Deployment
metadate:
    name: server-deployment
spec:
    replicas: 3
    selector:
        matchLabels:
            component: server
    template:
        metadata:
            labels:
                component: server
        spec:
            containers:
                - name: server
                  image: marshad1/multi-server
                  ports:
                    - containerPort: 5000
---

Lecture 215: Cluter IP for Express API
======================================
$ cd k8s
$ touch server-cluster-ip-service.yaml

---
apiVersion: v1
kind: Service
metadata:
    name: server-cluster-ip-service
spec:
    type: ClusterIP
    selector:
        component: server
    ports:
        - port: 5000
          targetPort: 5000
---

Lecture 216: Combining Config Into Single Files
===============================================

Combine all configuration files together and seperate them with '---'

Lecture 217: The Worker Deployment
==================================
$ cd k8s
$ touch workder-deployment.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata: 
    name: worker-deployment
spec:
    replicas: 1
    selector:
        matchLabels:
            component: worker
    template:
        metadate:
            labels:
                component: worker
        spec:
            containers:
                - name: worker
                  image: marshad1/multi-worker
---

Lecture 218: Reapplyig a Batch of Config Files
==============================================
$ cd complex
$ cd k8s
$ ls k8s
- client-deployment.yaml
- server-deployment.yaml
- worker-deployment.yaml
- client-cluster-ip-service.yaml
- server-cluster-ip-service.yaml

$ kubectl apply -f k8s
$ kubectl get pods
$ kubectl logs <name-of-pod>

Lecture 219: Creating and Applying Redis Config
===============================================
$ cd k8s
$ touch redis-deployment.yaml

---
apiVersion: app/v1
kind: Deployment
metadate:
    name: redis-deployment
spec:
    replicas: 1
    selector:
        matchLabels:
            component: redis
    template:
        metadate:
            labels:
                component: redis
        spec:
            containers:
                - name: redis
                  image: redis
                  ports:
                    - containerPort: 6379
---

$ touch redis-cluster-ip-service.yaml

---
apiVersion: v1
kind: Service
metadate:
    name: redis-cluster-ip-service
spec:
    type: ClusterIP
    selector:
        component: redis
    ports:
        - port: 6379
          targetPort: 6379
---

$ cd k8s
$ kubctl apply -f k8s

$ kubectl get pods
$ kubectl get services

Lecture 220: Important Note about Expected Postgres Error
=========================================================

Lecture 221: Last Set of Boring Config
======================================
$ postgres-deployment.yaml

---
apiVersion: apps/v1
kind: Deployment
metadata:
    name: postgres-deployment
spec:
    replicas: 1
    selector:
        matchLabels:
            component: postgres
    template:
        metadata:
            labels:
                component: postgres
        spec:
            containers
            - name: postgres
              image: postgres
              ports:
                - containerPort: 5432
---

$ touch postgres-cluster-ip-service.yaml

---
apiVersion: v1
kind: Service
metadate:
    name: postgres-clustre-ip-service
spec:
    type: ClusterIP
    selector:
        component: postgres
    ports:
        - port: 5432
          targetPort: 5432
---

$ cd k8s
$ kubectl apply -f k8s
$ kubectl get pods
$ kubectl get service

Lecture 222: The Need for Volumes with Databases
================================================

Lecture 223: Kubernetes Volumes
===============================

Lecture 224: Volumes vs Persistent Volumes
==========================================

Lecture 225: Persistent Volumes vs Persistent Volume Claims
===========================================================

Lecture 226:  Claim Config Files
================================

Lecture 227: Persistent Volume Access Modes
===========================================

Lecture 228: Where Does Kubernetes Allocate Persistent Volumes
==============================================================

Lecture 229: Designating a PVC in a Pod Template
================================================

Lecture 230: Applyng a PVC
==========================

Lecture 231: Defining Environment Variables
===========================================

Lecture 232: Adding Environment Variables to Config
===================================================

Lecture 233: Creating an Encoded Secret
=======================================

Lecture 234: Postgres Environment Variable Fix
==============================================

Lecture 235: Passing Secrets as Environment Variables
=====================================================

Lecture 236: Environment Variables as Strings
==============================================