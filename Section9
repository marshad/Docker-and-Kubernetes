=========================================
Section9: "Dockerizing" Multiple Services
=========================================

Lecture 111: Checkpoint Files
=============================

Lecture 112: Checkpoint Catchup
===============================

Lecture 113: Dockerizing a React App - Again!
=============================================

In the comples/client filer crate a file Dockerfile.dev

---
FROM node:alpine
WORKDIR '/app'
COPY ./package.json ./
RUN npm install
COPY . .
CMD ["npm", "run", "start"]
---

docker build -f Dockerfile.dev .

docker run <IMAGE-ID>

Lecture 114: Dockerizing Generic Node Apps
==========================================

Create a file Docker.dev in complex/server folder and also in complex/worker foleer

---
FROM node:alpine
WORKDIR '/app'
COPY ./package.json ./
RUN npm install
COPY . .
CMD ["npm", "run", "dev"]
---

Lecture 115: Adding Postgres as a Service
=========================================

create a file docker-compose.yml

---
version: '3'
services:
  postgres:
    image: 'postgres:latest'
---

docker-compose up

Lecture 116: Docker-compose Config
==================================

---
version: '3'
services:
  postgres:
    image: 'postgres:latest'
  redis:
    image: 'redis:latest'
  server:
    build:
      dockerfile: Dockerfile.dev
      context: ./server
    volumes:
      - /app/node_modules
      - ./server:/app
---

Lecture 117: Environment Variables with Docker Compose
======================================================

---
version: '3'
services:
  postgres:
    image: 'postgres:latest'
  redis:
    image: 'redis:latest'
  server:
    build:
      dockerfile: Dockerfile.dev
      context: ./server
    volumes:
      - /app/node_modules
      - ./server:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
---

docker-compose up

Lecture 118: The Worker and Client Services
===========================================

---
version: '3'
services:
  postgres:
    image: 'postgres:latest'
  redis:
    image: 'redis:latest'
  server:
    build:
      dockerfile: Dockerfile.dev
      context: ./server
    volumes:
      - /app/node_modules
      - ./server:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
  worker:
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app
  client:
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
---


Lecture 119: Nginx Path Routing
===============================

Lecture 120: Routing with Nginx
===============================

mkdir nginx
touch default.conf

---
upstream client {
    server client:3000;
}

upstream api {
    server api:5000;
}

server {
    listen 80;

    location / {
        proxy_pass http://client;
    }

    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}
---

Lecture 121: Building a Custom Nginx Image
==========================================

Dockerfile.dev within nginx folder

---
FROM nginx
COPY ./default.conf /etc/nginx/conf.d/default.conf
---

Update docker-compose.yml

---
version: '3'
services:
  postgres:
    image: 'postgres:latest'
  redis:
    image: 'redis:latest'
  nginx:
    restart: always
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '3050:80'
  api:
    build:
      dockerfile: Dockerfile.dev
      context: ./server
    volumes:
      - /app/node_modules
      - ./server:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
  worker:
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app
  client:
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      - /app/node_modules
      - ./client:/app
---

Lecutre 122: Starting Up Docker Compose
=======================================

docker-compose up --build

Lecture 123: Troubleshooting
============================

Lecture 124: Troubleshooting Startup Bugs
=========================================

Lecture 125: Opening Websocket Connections
==========================================

---
upstream client {
    server client:3000;
}

upstream api {
    server api:5000;
}

server {
    listen 80;

    location / {
        proxy_pass http://client;
    }

    location /sockjs-node {
        proxy_pass http://client;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection Upgrade;
    }

    location /api {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://api;
    }
}
---

